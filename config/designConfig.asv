function expDes = designConfig(const)
% ----------------------------------------------------------------------
% expDes = designConfig(const)
% ----------------------------------------------------------------------
% Goal of the function :
% Define experimental design
% ----------------------------------------------------------------------
% Input(s) :
% const : struct containing constant configurations
% ----------------------------------------------------------------------
% Output(s):
% expDes : struct containg experimental design
% ----------------------------------------------------------------------
% Function created by Martin SZINTE (martin.szinte@gmail.com)
% ----------------------------------------------------------------------

% Experimental variables
% Cond 1: Task
if const.sesNum == 1
    expDes.oneC = 1;
    expDes.nb_cond1 = 1;
elseif const.sesNum == 2
    expDes.oneC = 2;
    expDes.nb_cond1 = 1;
end
% 01: perception task
% 02: saccade task

% Rand 1: external motion screen position
if const.mkVideo
    expDes.oneR = input(sprintf(...
        '\n\tRand 1: motion position (1: left; 2: right): '));
    expDes.nb_rand1 = 1;
else
    expDes.oneR = const.stim_position';
    expDes.nb_rand1 = length(expDes.oneR);
end
% 1: left
% 2: right

% Rand 2: Ext. motion vertical direction
if const.mkVideo
    expDes.twoR = input(sprintf(...
        '\n\tRAND 2: motion direction (1: downward; 2: upward): '));
    expDes.nb_rand2 = 1;
else
    expDes.twoR = const.ext_motion_ver_dir';
    expDes.nb_rand2 = length(expDes.twoR);
end
% 1: downward
% 2: upward

% Rand 3: staircase number or fixation offset time percent
if const.sesNum == 1
    expDes.threeR = const.staircases';
    expDes.nb_rand3 = length(expDes.threeR);
elseif const.sesNum == 2
    if const.mkVideo
        expDes.threeR = input(sprintf(...
            '\n\tRAND 2: fixation offset time percentage (1: 20%%; 2: 30%%; 3: 40%%; 4: 50%%; 5: 60%%): '));
        expDes.nb_rand3 = 1;
    else
        expDes.threeR = const.fix_off_time_prct_num';
        expDes.nb_rand3 = length(expDes.threeR);
    end
end
% see constConfig.m

% Experimental loop
expDes.nb_var = 0;
expDes.nb_cond = 1;
expDes.nb_rand = 3;

% Pursuit experimental loop
trialMat = zeros(const.nb_trials, expDes.nb_cond + expDes.nb_var + expDes.nb_rand)*nan;

for t_trial = 1:const.nb_trials
    randVal1 = randperm(numel(expDes.oneR));
    randVal2 = randperm(numel(expDes.twoR));
    randVal3 = randperm(numel(expDes.threeR));
    rand_rand1 = expDes.oneR(randVal1(1));
    rand_rand2 = expDes.twoR(randVal2(1));
    rand_rand3 = expDes.threeR(randVal3(1));
    trialMat(t_trial, 4) = rand_rand1;
    trialMat(t_trial, 5) = rand_rand2;
    trialMat(t_trial, 6) = rand_rand3;
end

expDes.expMat = [zeros(const.nb_trials,2)*nan, ...
                 zeros(const.nb_trials,1)*0+const.runNum,...
                [1:const.nb_trials]',...
                trialMat,...
                zeros(const.nb_trials,2)*nan];

% 01: onset
% 02: duration
% 03: run number
% 04: trial number
% 05: task
% 06: external motion screen position
% 07: external motion vertical direction
% 08: staircase number or fixation offset time percent 
% 09: external motion orientation
% 10: direction report
% 11: response duration

 end